// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WolfeReiter.Identity.Data;

namespace WolfeReiter.Identity.Data.Migrations.PgSqlMigrations
{
    [DbContext(typeof(PgSqlContext))]
    partial class PgSqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WolfeReiter.Identity.Data.Models.DataTransformsHistory", b =>
                {
                    b.Property<string>("TransformId")
                        .HasColumnName("transform_id")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("Applied")
                        .HasColumnName("applied")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TransformId")
                        .HasName("pk_data_transforms_history");

                    b.ToTable("data_transforms_history");
                });

            modelBuilder.Entity("WolfeReiter.Identity.Data.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("RoleId")
                        .HasName("pk_roles");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("WolfeReiter.Identity.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnName("failed_login_attempts")
                        .HasColumnType("integer");

                    b.Property<string>("GivenName")
                        .HasColumnName("given_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnName("hash")
                        .HasColumnType("bytea")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("LastLoginAttempt")
                        .HasColumnName("last_login_attempt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Locked")
                        .HasColumnName("locked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnName("salt")
                        .HasColumnType("bytea")
                        .HasMaxLength(32);

                    b.Property<string>("Surname")
                        .HasColumnName("surname")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_number")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_users_name");

                    b.ToTable("users");
                });

            modelBuilder.Entity("WolfeReiter.Identity.Data.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_role_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("UserRoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_user_roles_role_id");

                    b.HasIndex("UserId")
                        .HasName("ix_user_roles_user_id");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("WolfeReiter.Identity.Data.Models.UserRole", b =>
                {
                    b.HasOne("WolfeReiter.Identity.Data.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WolfeReiter.Identity.Data.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
